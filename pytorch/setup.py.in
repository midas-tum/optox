import os
from setuptools import setup
from torch.utils.cpp_extension import BuildExtension, CppExtension, CUDAExtension

EXT_MODULES = []

def add_module(opname, inc_dir=[]):
    EXT_MODULES.append(
        CUDAExtension(f"th_{opname}_operator", [
            os.path.join("${CMAKE_CURRENT_SOURCE_DIR}", f"th_{opname}_operator.cpp"),
            ],
            include_dirs=["${OPTOX_INCLUDE_DIR}", "${CUDA_SDK_ROOT_DIR}"] + inc_dir,
            library_dirs=["${OPTOX_LIBRARY_DIR}",],
            runtime_library_dirs=["${OPTOX_LIBRARY_DIR}",],
            libraries=["optox", ]
        ),
    )

add_module("act")
add_module("nabla")
add_module("demosaicing")
add_module("rot")
add_module("warp")
add_module("pad")
add_module("averagepooling")
add_module("maxpooling")
add_module("scale")

if ("${WITH_GPUNUFFT}" == "ON"):
    add_module("gpunufft")
    add_module("gpunufft_singlecoil")

setup(
    name='optoth',
    version='0.3.0',
    author="Erich Kobler, Kerstin Hammernik, Thomas Kuestner",
    author_email="erich.kobler@icg.tugraz.at, k.hammernik@imperial.ac.uk, thomas.kuestner@med.uni-tuebingen.de",
    packages=["optoth", 
              "optoth.activations",
              "optoth.test"],
    package_dir={"optoth": os.path.join("${CMAKE_CURRENT_SOURCE_DIR}", "optoth"),
                 "optoth.activations": os.path.join("${CMAKE_CURRENT_SOURCE_DIR}", "optoth", "activations"),
                 "optoth.test": os.path.join("${CMAKE_CURRENT_SOURCE_DIR}", "optoth", "test")},
    include_dirs=[],
    ext_package="_ext",
    ext_modules=EXT_MODULES,
    cmdclass={
        'build_ext': BuildExtension
    },
    install_requires=[
        "numpy >= 1.15",
        "torch >= 1.0.0",
        "torchvision >= 0.2.1",
    ],
)
